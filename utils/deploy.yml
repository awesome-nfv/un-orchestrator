---
- hosts: localhost
  remote_user: root

#Requires to install ansible:
# sudo apt-get install ansible
#Run in with the command: 
# sudo ansible-playbook --ask-sudo-pass -i "localhost," -c local  deploy.yml --extra-vars "cores=1 docker=OFF native=OFF kvm=ON double_decker=OFF gui=OFF"

#TODO: install docker if needed

  vars:
    path: ../../
    dd: '{{ double_decker }}'
    enable_kvm: '{{ kvm }}'
    enable_docker: '{{ docker }}'
    enable_native: '{{ native }}'
    enable_gui: '{{ gui }}'
  
  tasks:
    - name: "updates apt"
      apt: update_cache=yes
      
    - name: "install dependencies"
      apt: pkg={{item}} state=installed
      with_items:
        - git
        - build-essential
        - cmake
        - cmake-curses-gui
        - libboost-all-dev
        - libmicrohttpd-dev
        - libxml2-dev
        - ethtool
        - sqlite3
        - libsqlite3-dev
        - libssl-dev
        - unzip
        - automake
        - autoconf
        - libtool
        - pkg-config
        - linux-libc-dev
        - libc6-dev
        - libcppunit-dev
        - libcunit1-dev
        - libjson-c-dev
        - libjson-c2
        - libzmq3-dev
        
    - name: "install dependencies for KVM environment"
      apt: pkg={{item}} state=installed
      with_items:
        - libxml-xpath-perl
        - libyajl-dev
        - libdevmapper-dev
        - libpciaccess-dev
        - libnl-dev
        - python-dev
        - xsltproc
        - autopoint
        - uuid-dev
        - libxml2-utils
        - libperl-dev
        - libgtk2.0-dev
        - bridge-utils
      when: enable_kvm == "ON"

    - name: "install dependencies for the GUI"
      apt: pkg={{item}} state=installed
      with_items:
        - python2.7
        - python-pip
      when: enable_gui == "ON"
      
 
    - name: "unzip inih"
      unarchive: src={{ path }}/un-orchestrator/contrib/inih.zip dest={{ path }} copy=no
      
    - name: "build inih"
      shell: "{{ item }} chdir={{ path }}/inih"
      with_items:
      - cp -r * ../un-orchestrator/orchestrator/node_resource_manager/database_manager/SQLite


    - name: "Prapare python environment for the GUI"
      pip: name="Django jsonschema json-schema-validator"
      when: enable_gui == "ON"

    - name: "init submodules"
      command: "{{ item }} chdir={{ path }}/un-orchestrator"
      with_items:
      - git submodule update --init --recursive

      - name: "Initialize database of the GUI"
      command: "{{ item }} chdir={{ path }}/un-orchestrator/GUI"
      with_items:
      - python manage.py migrate
      when: enable_gui == "ON"

    - name: "build database initializer (with {{ cores }} cores)"
      command: "{{ item }} chdir={{ path }}/un-orchestrator/db_initializer"
      with_items:
      - cmake .
      - make -j{{ cores }}

    - name: "build name-resolver (with {{ cores }} cores)"
      command: "{{ item }} chdir={{ path }}/un-orchestrator/name-resolver"
      with_items:
      - cmake .
      - make -j{{ cores }}

    - name: "build orchestrator (with {{ cores }} cores)"
      command: "{{ item }} chdir={{ path }}/un-orchestrator/orchestrator"
      with_items:
      - cmake  -D'ENABLE_KVM={{ enable_kvm }}' -D'ENABLE_DOCKER={{ enable_docker}}' -D'ENABLE_DOUBLE_DECKER_CONNECTION={{ dd }}' -D'ENABLE_NATIVE={{ enable_native }}' .
      - make -j{{ cores }}
