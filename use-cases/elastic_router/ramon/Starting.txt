[PD] 2016-05-30 ***NOTE*** Work in progress. The startup sequnce is
subject to change.


The starting sequence for the aggregator and the RAMONs is as follows:

0. cd /home/unify/aggregator

1. The aggregator starts. I have been starting it like this while testing:
   ./aggregator.py -k /etc/doubledecker/a-keys.json -b 172.17.0.3 agg -t monitor_aggregate/node -l DEBUG

  DEBUG should be changed to INFO in "production" use.

2. When the aggregator is running and has connected to the DD bus, one
   or more of the RAMONs can start.
   There is no mechanism to synchronize this. I guess we could
   implement some primitive try-wait-try mechnism for this, or simply
   ignore the problem and do it "by hand" for now.

2a. The RAMONs are started indirectly by ratemon_client.py via a shell script.

    ./ramon_dd.sh ramon1 veth0
    ./ramon_dd.sh ramon2 veth2 55556 54737 
    ./ramon_dd.sh ramon2 veth2 55557 54738
    ./ramon_dd.sh ramon2 veth2 55558 54739

    The first argument is the name, which is used both for
        registering on the DD bus and for registering in the aggregator.
    The second argument is the interface to monitor. (Default is veth0).
    The third argument is the port used for communication between
        RAMON and the ratemon_client. (Default is 55555).
    The fourth argument is the port used to configure RAMON.(Default
        is 54736). If the configuration is to be done over the DD
        bus, a mechanism for relaying the configuration to the RAMON
        has to be implemented in ratemon_client.py (there is some
        code there, which Bertrand wrote) that can be expanded.
        Otherwise the config message can be sent directly to RAMON
        on the config port.

    The documentation is lacking regarding the config messages.
    ./ramon/ramon_svn/monconf --help lists the possible configuration
    messages that can be sent from that program. The config message
    has the json-format {'<config-param>': value}.

    However, I don't think we need to send any other config message
    than 'exit' to a RAMON since it should work as well to shut them
    down and start new instances in the scale-up and scale-down
    scenarios.

   The shell script start_ramons.sh starts four ratemon_clients (and
   their corresponding RAMONs).

3. To stop a RAMON a config message "exit" should be sent to it. This
   causes the RAMON to exit after telling the ratemon_client to
   shutdown. The shutdown of the ratemon_client does not work
   properly, but I haven't investigated why. super().shutdown() is
   called, but never returns and the program does not exit either.
