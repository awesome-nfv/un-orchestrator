#!/bin/bash
CUR=$(pwd)
ORCHDIR=/home/unify/un-orchestrator/orchestrator

if [ "$#" -lt 1 ]
then
 echo "$0 is used to control the Elastic Router demo"
 echo "Available commands: "
 echo "$0 start       - Start services interactively"
 echo "$0 start-bg    - Start services in the background" 
 echo "$0 start-er    - Send the Elastic Router NFFG to the orchestrator"
 echo "$0 status      - Show service status"
 echo "$0 replay      - Replay traffic interactively"
 echo "$0 replay-bg   - Replaying traffic in the background"
 echo "$0 stop-replay - Stop traffic replay"
 echo "$0 stop        - Stop services"
 echo "$0 remove      - Stop AND remove _all_ containers"
 echo "$0 ssh         - Print SSH tunnel commands" 
 exit
else
 echo -e "\c"
fi

if [ "$(whoami)" != "root" ]; then
  echo "Sorry, you need to sudo this!"
  exit 1
fi

for n in $(docker version | grep Version | egrep -o -e  '([0-9\.]+)'); do
  if [ "$n" != "1.9.1" ] ; then
    echo "Expect version 1.9.1 of Docker, running version $n"
  fi
done

function remove_all () {
echo "Removing containers"
docker-compose kill
docker-compose rm -f 
echo "Stopping node-orchestrator.." 
sudo pkill -f node-orchestrator
sudo pkill -f gdb
echo "Removing any leftover containers.."
docker ps -a -q --filter="name=ratemon*" | xargs -r docker rm -f 
docker ps -a -q --filter="name=cadvisor*" | xargs -r docker rm -f 
docker ps -a -q --filter="name=*ctrl*" |  xargs -r docker rm -f
docker ps -a -q --filter="name=2_*" |  xargs -r docker rm -f

sudo ovs-vsctl del-br Bridge1
sudo ovs-vsctl del-br Bridge2
}

function start_bg () {
echo "Starting node-orchestrator"
cd $ORCHDIR
# for debugging the node-orchestrator
# sudo screen -r to attach to the gdb session and "run" 
#sudo screen -dmS nodeorc gdb --args /home/unify/un-orchestrator/orchestrator/node-orchestrator --d /home/unify/un-orchestrator/orchestrator/config/orchestrator_config_er_demo.ini
sudo ./node-orchestrator --d ./config/orchestrator_config_er_demo.ini  > $CUR/logs/node-orchestrator_stdout.log 2> $CUR/logs/node-orchestrator_stderr.log &
cd $CUR
echo "Waiting for node-orchestrator to start.."
while ! nc -z localhost 8080; do   
  sleep 0.1 # wait for 1/10 of the second before check again
done
echo "Starting the other services.."
docker-compose up -d 

}

function start_inter () {
echo "Starting node-orchestrator"
cd $ORCHDIR
# for debugging the node-orchestrator
# sudo screen -r to attach to the gdb session and "run" 
#sudo screen -dmS nodeorc gdb --args /home/unify/un-orchestrator/orchestrator/node-orchestrator --d /home/unify/un-orchestrator/orchestrator/config/orchestrator_config_er_demo.ini
sudo ./node-orchestrator --d ./config/orchestrator_config_er_demo.ini  > >(tee $CUR/logs/node-orchestrator_stdout.log) 2> >(tee $CUR/logs/node-orchestrator_stderr.log >&2) &

cd $CUR
echo "Waiting for node-orchestrator to start.."
while ! nc -z localhost 8080; do   
  sleep 0.1 # wait for 1/10 of the second before check again
done
echo "Starting the other services.."
docker-compose up

}
function stop_all () {
killall -9 tcpreplay
docker-compose stop
echo "Stopped all backgrund containers"
echo "Stopping node-orchestrator.." 
sudo pkill -f node-orchestrator
echo "Stopping any leftover containers.."
docker ps -a -q --filter="name=ratemon*"   | xargs -r docker rm -f
docker ps -a -q --filter="name=cadvisor*"  | xargs -r docker rm -f
docker ps -a -q --filter="name=*ctrl*"  | xargs -r docker rm -f
docker ps -a -q --filter="name=2_*" |  xargs -r docker rm -f
sudo ovs-vsctl del-br Bridge1
sudo ovs-vsctl del-br Bridge2
}

function start_er () {
NFFG=/home/unify/un-orchestrator/use-cases/elastic_router/elastic_router_files/nffg_files/er_nffg_virtualizer5_v4.xml
/usr/bin/curl -i -d "@$NFFG" -X POST http://localhost:9090/edit-config
}

function start_replay () {
LOOPS=9999

echo "starting 4 tcp replays, looping $LOOPS times, "
ip netns exec sap1 tcpreplay -i veth0 -l $LOOPS -K ../traffic/er1.pcap &
ip netns exec sap2 tcpreplay -i veth1 -l $LOOPS -K ../traffic/er2.pcap &
ip netns exec sap3 tcpreplay -i veth2 -l $LOOPS -K ../traffic/er3.pcap &
ip netns exec sap4 tcpreplay -i veth3 -l $LOOPS -K ../traffic/er4.pcap 
}

function start_slow_replay () {
LOOPS=9999
PPS=-2
echo "starting 4 tcp replays, looping $LOOPS times, "
ip netns exec sap1 tcpreplay --sleep-accel $PPS -i veth0 -l $LOOPS -K ../traffic/er1.pcap &
ip netns exec sap2 tcpreplay --sleep-accel $PPS -i veth1 -l $LOOPS -K ../traffic/er2.pcap &
ip netns exec sap3 tcpreplay --sleep-accel $PPS -i veth2 -l $LOOPS -K ../traffic/er3.pcap &
ip netns exec sap4 tcpreplay --sleep-accel $PPS -i veth3 -l $LOOPS -K ../traffic/er4.pcap 
}

function start_replay_bg () {
LOOPS=9999

echo "starting 4 tcp replays, looping $LOOPS times, "
ip netns exec sap1 tcpreplay -i veth0 -l $LOOPS -K ../traffic/er1.pcap &
ip netns exec sap2 tcpreplay -i veth1 -l $LOOPS -K ../traffic/er2.pcap &
ip netns exec sap3 tcpreplay -i veth2 -l $LOOPS -K ../traffic/er3.pcap &
ip netns exec sap4 tcpreplay -i veth3 -l $LOOPS -K ../traffic/er4.pcap &
}

function stop_replay () {
 killall -9 tcpreplay
}

function show_status () {
NODEORCH=$(pidof node-orchestrator)
docker-compose ps 
if [ -z "$NODEORCH" ]; then 
  echo -e "node-orchestrator\t\t\t\t Down" 
else 
  echo -e "node-orchestrator\t\t\t\t Up"
fi

echo ""
echo "Monitoring functions"
echo "--------------------" 
docker ps -a --filter="name=ratemon*|cadvisor*"
#for n in $(docker ps -a --filter="name=ratemon*" | egrep -o -e '(ratemon-.+)') ; do
#  echo -e "$n\t\t\t\t\t Up"
#done
#for n in $(docker ps -a --filter="name=cadvisor*" | egrep -o -e '(cadvisor-.+)') ; do
#  echo -e "$n\t\t\t\t\t Up"
#done

echo "" 
echo "Elastic router VNFs"
echo "-------------------"
docker ps -a --filter="name=2_*"
#for n in $(docker ps -a --filter="name=2_*" | egrep -o -e '(2_.+)') ; do
#  echo -e "$n\t\t\t\t\t\t Up"
#done

}

function show_ssh () {
 echo "ssh -L 3000:localhost:3000 -L 4242:localhost:4242  -L 10001:localhost:10001 -L 8081:localhost:8081 unify@durak.testbed.se"
 echo "OpenTSDB GUI http://localhost:4242"
 echo "Elastic Router GUI http://localhost:10001"
 echo "CAdvisor GUI http://localhost:8081"
 echo "Grafana GUI http://localhost:3000"
}

cmd="$1"

case $cmd in
 remove)
   remove_all
   ;;
 start)
   start_inter
   stop_all
   ;;
 start-bg) 
   start_bg
   show_status
   ;;
 start-er)
   start_er
   ;; 
 replay)
   start_replay
   stop_replay
   ;;
 replay-slow)
   start_slow_replay
   stop_replay
   ;;
 replay-bg)
   start_replay_bg
   ;;
 stop-replay)
   stop_replay
   ;;
 status)
  show_status
  ;;
 stop)
  stop_all
  ;;
 ssh)
  show_ssh
  ;;
 *) 
  echo "unknown command"
  ;;
esac
